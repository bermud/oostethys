<?xml version="1.0" encoding="UTF-8"?>
<%
# Software written by Bill Howe, OHSU.
# Copyright 2008, Oregon Health & Science University.
# All Rights Reserved.
#
# Permission to use, copy, modify, and distribute any part of this program for non-profit
# scientific research or educational use, without fee, and without a written agreement is
# hereby  granted,  provided  that the above copyright notice, and this license agreement
# appear  in all copies.  Inquiries regarding use of this software in commercial products
# or for commercial purposes should be directed to:
# Technology & Research Collaborations, Oregon Health & Science University,
# 2525 SW 1st Ave, Suite 120, Portland, OR 97210
# Ph: 503-494-8200, FAX: 503-494-4729, Email: techmgmt@ohsu.edu.
#
# IN  NO EVENT SHALL OREGON HEALTH & SCIENCE UNIVERSITY BE LIABLE TO ANY PARTY FOR DIRECT,
# INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING
# OUT  OF THE USE OF THIS SOFTWARE.  THE SOFTWARE IS PROVIDED "AS IS", AND OREGON HEALTH &
# SCIENCE  UNIVERSITY  HAS  NO  OBLIGATION  TO  PROVIDE  MAINTENANCE, SUPPORT, UPDATES, OR
# ENHANCEMENTS.  OREGON  HEALTH  & SCIENCE UNIVERSITY MAKES NO REPRESENTATIONS NOR EXTENDS
# WARRANTIES  OF  ANY  KIND, EITHER IMPLIED OR EXPRESS, INCLUDING, BUT NOT LIMITED TO, THE# IMPLIED  WARRANTIES  OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR THAT THE
# USE OF THE SOFTWARE WILL NOT INFRINGE ANY PATENT, TRADEMARK OR OTHER RIGHTS.
%>
<%

sql = '''
  SELECT *
    FROM (%s) as o
   WHERE offering = '%s'
     AND observedProperty = '%s'
''' % (observedproperty_query, UnQuote(offering), UnQuote(observedProperty))
ds = DB.getDicts(sql)
if ds: 
  d = ds[0]
else:
  raise ValueError("No observedProperty of '%s' for offering '%s'" % (observedProperty, offering))
locals().update(d)

if locals().has_key('eventTime'):
  tc = TimeCondition(eventTime, "DATA_TIME")
else:
  tc = TimeConditionLatest(UnQuote(offering), UnQuote(observedProperty))

if locals().has_key('bbox'):
  bc = BoundingBoxCondition(bbox)
else:
  bc = TrueCondition()

sqlcond = ' AND '.join([tc.AsSQL(), bc.AsSQL()])

obssql = '''
   SELECT %s, lat, lon, depth, value 
     FROM (%s) as o
    WHERE offering = '%s' 
      AND observedProperty = '%s'
      AND (%s)
    ORDER BY time
''' % (FormatTime('time'), observation_query, UnQuote(offering), UnQuote(observedProperty), sqlcond)

#raise SOSException("debug", obssql)
tuples = DB.getTuples(obssql)
%>

<om:Observation xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:swe="http://www.opengis.net/swe/0" xmlns:gml="http://www.opengis.net/gml" xmlns:om="http://www.opengis.net/om" xmlns:xlink="http://www.w3.org/1999/xlink" xsi:schemaLocation="http://www.opengis.net/om http://schemas.opengis.net/sos/1.0.0/sosGetObservation.xsd" gml:id="<%=variable%>">
    <gml:description><%=description%></gml:description>
    <gml:name><%=offering%></gml:name>
    <gml:location>
        <!-- geometry containing all tuples in this observation -->
                  <gml:Envelope>
                      <gml:lowerCorner srsName="urn:ogc:def:crs:EPSG:6.5:<%=srid%>"><%=ymin%> <%=xmin%></gml:lowerCorner>
                      <gml:upperCorner srsName="urn:ogc:def:crs:EPSG:6.5:<%=srid%>"><%=ymax%> <%=xmax%></gml:upperCorner>
                      </gml:Envelope>
    </gml:location>
    <!--  Time of response- use TimePeriod for a series of data  -->
    <!--  or TimeInstant for a single measurement  -->
<%=tc.AsGML()%>
    <!-- Procedure -->
    <om:procedure/>
    <!-- the property measured -->
    <om:observedProperty xlink:href="<%=Quote(observedProperty)%>"/>
    <!-- Feature Of Interest -->
    <om:featureOfInterest xlink:href="<%=featureofinterest%>"/>

    <!-- Result Structure and Encoding -->
    <om:resultDefinition>
        <swe:DataBlockDefinition>
            <swe:components name="<%=Quote(observedProperty)%>">
                        <swe:DataRecord>
                            <swe:field name="time">
                                <swe:Time definition="urn:ogc:def:phenomenon:time:iso8601"/>

                            </swe:field>
                            <swe:field name="latitude">
                                <swe:Quantity definition="urn:ogc:def:phenomenon:latitude:wgs84">
                                    <swe:uom code="deg"/>
                                </swe:Quantity>
                            </swe:field> 
                            <swe:field name="longitude"> 
                                <swe:Quantity definition="urn:ogc:def:phenomenon:longitude:wgs84">
                                    <swe:uom code="deg"/>
                                </swe:Quantity>

                            </swe:field>
                            <swe:field name="depth">
                                <swe:Quantity definition="cf:depth">
                                    <swe:uom code="urn:ogc:unit:meter"/>
                                </swe:Quantity>
                            </swe:field>
                            <swe:field name="<%=variable%>">
                                <swe:Quantity definition="<%=mmiuri%>">
                                    <swe:uom xlink:href="<%=uom%>"/>
                                </swe:Quantity>

                            </swe:field>
                        </swe:DataRecord>

            </swe:components>
            <swe:encoding>
                <swe:AsciiBlock tokenSeparator="<%=tokenSeparator%>" blockSeparator="<%=blockSeparator%>" decimalSeparator="."/>
            </swe:encoding>
        </swe:DataBlockDefinition>
    </om:resultDefinition>
<%

rows = [tokenSeparator.join([str(v) for v in t]) for t in tuples]
result = blockSeparator.join(rows)

%>
<om:result><%=result%></om:result>
</om:Observation>

